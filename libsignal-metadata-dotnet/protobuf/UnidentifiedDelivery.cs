// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UnidentifiedDelivery.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalmetadata.protobuf {

  /// <summary>Holder for reflection information generated from UnidentifiedDelivery.proto</summary>
  public static partial class UnidentifiedDeliveryReflection {

    #region Descriptor
    /// <summary>File descriptor for UnidentifiedDelivery.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UnidentifiedDeliveryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpVbmlkZW50aWZpZWREZWxpdmVyeS5wcm90bxIGc2lnbmFsIqwBChFTZXJ2",
            "ZXJDZXJ0aWZpY2F0ZRIVCgtjZXJ0aWZpY2F0ZRgBIAEoDEgAEhMKCXNpZ25h",
            "dHVyZRgCIAEoDEgBGkMKC0NlcnRpZmljYXRlEgwKAmlkGAEgASgNSAASDQoD",
            "a2V5GAIgASgMSAFCCgoIaWRfb25lb2ZCCwoJa2V5X29uZW9mQhMKEWNlcnRp",
            "ZmljYXRlX29uZW9mQhEKD3NpZ25hdHVyZV9vbmVvZiLUAgoRU2VuZGVyQ2Vy",
            "dGlmaWNhdGUSFQoLY2VydGlmaWNhdGUYASABKAxIABITCglzaWduYXR1cmUY",
            "AiABKAxIARrqAQoLQ2VydGlmaWNhdGUSEAoGc2VuZGVyGAEgASgJSAASFgoM",
            "c2VuZGVyRGV2aWNlGAIgASgNSAESEQoHZXhwaXJlcxgDIAEoBkgCEhUKC2lk",
            "ZW50aXR5S2V5GAQgASgMSAMSKwoGc2lnbmVyGAUgASgLMhkuc2lnbmFsLlNl",
            "cnZlckNlcnRpZmljYXRlSARCDgoMc2VuZGVyX29uZW9mQhQKEnNlbmRlckRl",
            "dmljZV9vbmVvZkIPCg1leHBpcmVzX29uZW9mQhMKEWlkZW50aXR5S2V5X29u",
            "ZW9mQg4KDHNpZ25lcl9vbmVvZkITChFjZXJ0aWZpY2F0ZV9vbmVvZkIRCg9z",
            "aWduYXR1cmVfb25lb2YiyQMKGVVuaWRlbnRpZmllZFNlbmRlck1lc3NhZ2US",
            "GQoPZXBoZW1lcmFsUHVibGljGAEgASgMSAASGQoPZW5jcnlwdGVkU3RhdGlj",
            "GAIgASgMSAESGgoQZW5jcnlwdGVkTWVzc2FnZRgDIAEoDEgCGo0CCgdNZXNz",
            "YWdlEj4KBHR5cGUYASABKA4yLi5zaWduYWwuVW5pZGVudGlmaWVkU2VuZGVy",
            "TWVzc2FnZS5NZXNzYWdlLlR5cGVIABI2ChFzZW5kZXJDZXJ0aWZpY2F0ZRgC",
            "IAEoCzIZLnNpZ25hbC5TZW5kZXJDZXJ0aWZpY2F0ZUgBEhEKB2NvbnRlbnQY",
            "AyABKAxIAiI9CgRUeXBlEhQKEFpFUk9fUExBQ0VIT0xERVIQABISCg5QUkVL",
            "RVlfTUVTU0FHRRABEgsKB01FU1NBR0UQAkIMCgp0eXBlX29uZW9mQhkKF3Nl",
            "bmRlckNlcnRpZmljYXRlX29uZW9mQg8KDWNvbnRlbnRfb25lb2ZCFwoVZXBo",
            "ZW1lcmFsUHVibGljX29uZW9mQhcKFWVuY3J5cHRlZFN0YXRpY19vbmVvZkIY",
            "ChZlbmNyeXB0ZWRNZXNzYWdlX29uZW9mQkoKHW9yZy5zaWduYWwubGlic2ln",
            "bmFsLm1ldGFkYXRhQgxTaWduYWxQcm90b3OqAhpsaWJzaWduYWxtZXRhZGF0",
            "YS5wcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.ServerCertificate), global::libsignalmetadata.protobuf.ServerCertificate.Parser, new[]{ "Certificate", "Signature" }, new[]{ "CertificateOneof", "SignatureOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.ServerCertificate.Types.Certificate), global::libsignalmetadata.protobuf.ServerCertificate.Types.Certificate.Parser, new[]{ "Id", "Key" }, new[]{ "IdOneof", "KeyOneof" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.SenderCertificate), global::libsignalmetadata.protobuf.SenderCertificate.Parser, new[]{ "Certificate", "Signature" }, new[]{ "CertificateOneof", "SignatureOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.SenderCertificate.Types.Certificate), global::libsignalmetadata.protobuf.SenderCertificate.Types.Certificate.Parser, new[]{ "Sender", "SenderDevice", "Expires", "IdentityKey", "Signer" }, new[]{ "SenderOneof", "SenderDeviceOneof", "ExpiresOneof", "IdentityKeyOneof", "SignerOneof" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage), global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Parser, new[]{ "EphemeralPublic", "EncryptedStatic", "EncryptedMessage" }, new[]{ "EphemeralPublicOneof", "EncryptedStaticOneof", "EncryptedMessageOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message), global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Parser, new[]{ "Type", "SenderCertificate", "Content" }, new[]{ "TypeOneof", "SenderCertificateOneof", "ContentOneof" }, new[]{ typeof(global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type) }, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServerCertificate : pb::IMessage<ServerCertificate> {
    private static readonly pb::MessageParser<ServerCertificate> _parser = new pb::MessageParser<ServerCertificate>(() => new ServerCertificate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate(ServerCertificate other) : this() {
      switch (other.CertificateOneofCase) {
        case CertificateOneofOneofCase.Certificate:
          Certificate = other.Certificate;
          break;
      }

      switch (other.SignatureOneofCase) {
        case SignatureOneofOneofCase.Signature:
          Signature = other.Signature;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCertificate Clone() {
      return new ServerCertificate(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificateOneofCase_ == CertificateOneofOneofCase.Certificate ? (pb::ByteString) certificateOneof_ : pb::ByteString.Empty; }
      set {
        certificateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        certificateOneofCase_ = CertificateOneofOneofCase.Certificate;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signatureOneofCase_ == SignatureOneofOneofCase.Signature ? (pb::ByteString) signatureOneof_ : pb::ByteString.Empty; }
      set {
        signatureOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        signatureOneofCase_ = SignatureOneofOneofCase.Signature;
      }
    }

    private object certificateOneof_;
    /// <summary>Enum of possible cases for the "certificate_oneof" oneof.</summary>
    public enum CertificateOneofOneofCase {
      None = 0,
      Certificate = 1,
    }
    private CertificateOneofOneofCase certificateOneofCase_ = CertificateOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateOneofOneofCase CertificateOneofCase {
      get { return certificateOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCertificateOneof() {
      certificateOneofCase_ = CertificateOneofOneofCase.None;
      certificateOneof_ = null;
    }

    private object signatureOneof_;
    /// <summary>Enum of possible cases for the "signature_oneof" oneof.</summary>
    public enum SignatureOneofOneofCase {
      None = 0,
      Signature = 2,
    }
    private SignatureOneofOneofCase signatureOneofCase_ = SignatureOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureOneofOneofCase SignatureOneofCase {
      get { return signatureOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignatureOneof() {
      signatureOneofCase_ = SignatureOneofOneofCase.None;
      signatureOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate != other.Certificate) return false;
      if (Signature != other.Signature) return false;
      if (CertificateOneofCase != other.CertificateOneofCase) return false;
      if (SignatureOneofCase != other.SignatureOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) hash ^= Certificate.GetHashCode();
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) hash ^= Signature.GetHashCode();
      hash ^= (int) certificateOneofCase_;
      hash ^= (int) signatureOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate);
      }
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCertificate other) {
      if (other == null) {
        return;
      }
      switch (other.CertificateOneofCase) {
        case CertificateOneofOneofCase.Certificate:
          Certificate = other.Certificate;
          break;
      }

      switch (other.SignatureOneofCase) {
        case SignatureOneofOneofCase.Signature:
          Signature = other.Signature;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Certificate = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerCertificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Certificate : pb::IMessage<Certificate> {
        private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.ServerCertificate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate(Certificate other) : this() {
          switch (other.IdOneofCase) {
            case IdOneofOneofCase.Id:
              Id = other.Id;
              break;
          }

          switch (other.KeyOneofCase) {
            case KeyOneofOneofCase.Key:
              Key = other.Key;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate Clone() {
          return new Certificate(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return idOneofCase_ == IdOneofOneofCase.Id ? (uint) idOneof_ : 0; }
          set {
            idOneof_ = value;
            idOneofCase_ = IdOneofOneofCase.Id;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Key {
          get { return keyOneofCase_ == KeyOneofOneofCase.Key ? (pb::ByteString) keyOneof_ : pb::ByteString.Empty; }
          set {
            keyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            keyOneofCase_ = KeyOneofOneofCase.Key;
          }
        }

        private object idOneof_;
        /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
        public enum IdOneofOneofCase {
          None = 0,
          Id = 1,
        }
        private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofOneofCase IdOneofCase {
          get { return idOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdOneof() {
          idOneofCase_ = IdOneofOneofCase.None;
          idOneof_ = null;
        }

        private object keyOneof_;
        /// <summary>Enum of possible cases for the "key_oneof" oneof.</summary>
        public enum KeyOneofOneofCase {
          None = 0,
          Key = 2,
        }
        private KeyOneofOneofCase keyOneofCase_ = KeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyOneofOneofCase KeyOneofCase {
          get { return keyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKeyOneof() {
          keyOneofCase_ = KeyOneofOneofCase.None;
          keyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Certificate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Certificate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Key != other.Key) return false;
          if (IdOneofCase != other.IdOneofCase) return false;
          if (KeyOneofCase != other.KeyOneofCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
          if (keyOneofCase_ == KeyOneofOneofCase.Key) hash ^= Key.GetHashCode();
          hash ^= (int) idOneofCase_;
          hash ^= (int) keyOneofCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (idOneofCase_ == IdOneofOneofCase.Id) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (keyOneofCase_ == KeyOneofOneofCase.Key) {
            output.WriteRawTag(18);
            output.WriteBytes(Key);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (idOneofCase_ == IdOneofOneofCase.Id) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (keyOneofCase_ == KeyOneofOneofCase.Key) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Certificate other) {
          if (other == null) {
            return;
          }
          switch (other.IdOneofCase) {
            case IdOneofOneofCase.Id:
              Id = other.Id;
              break;
          }

          switch (other.KeyOneofCase) {
            case KeyOneofOneofCase.Key:
              Key = other.Key;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Key = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SenderCertificate : pb::IMessage<SenderCertificate> {
    private static readonly pb::MessageParser<SenderCertificate> _parser = new pb::MessageParser<SenderCertificate>(() => new SenderCertificate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SenderCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate(SenderCertificate other) : this() {
      switch (other.CertificateOneofCase) {
        case CertificateOneofOneofCase.Certificate:
          Certificate = other.Certificate;
          break;
      }

      switch (other.SignatureOneofCase) {
        case SignatureOneofOneofCase.Signature:
          Signature = other.Signature;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SenderCertificate Clone() {
      return new SenderCertificate(this);
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Certificate {
      get { return certificateOneofCase_ == CertificateOneofOneofCase.Certificate ? (pb::ByteString) certificateOneof_ : pb::ByteString.Empty; }
      set {
        certificateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        certificateOneofCase_ = CertificateOneofOneofCase.Certificate;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signatureOneofCase_ == SignatureOneofOneofCase.Signature ? (pb::ByteString) signatureOneof_ : pb::ByteString.Empty; }
      set {
        signatureOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        signatureOneofCase_ = SignatureOneofOneofCase.Signature;
      }
    }

    private object certificateOneof_;
    /// <summary>Enum of possible cases for the "certificate_oneof" oneof.</summary>
    public enum CertificateOneofOneofCase {
      None = 0,
      Certificate = 1,
    }
    private CertificateOneofOneofCase certificateOneofCase_ = CertificateOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateOneofOneofCase CertificateOneofCase {
      get { return certificateOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCertificateOneof() {
      certificateOneofCase_ = CertificateOneofOneofCase.None;
      certificateOneof_ = null;
    }

    private object signatureOneof_;
    /// <summary>Enum of possible cases for the "signature_oneof" oneof.</summary>
    public enum SignatureOneofOneofCase {
      None = 0,
      Signature = 2,
    }
    private SignatureOneofOneofCase signatureOneofCase_ = SignatureOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignatureOneofOneofCase SignatureOneofCase {
      get { return signatureOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignatureOneof() {
      signatureOneofCase_ = SignatureOneofOneofCase.None;
      signatureOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SenderCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SenderCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Certificate != other.Certificate) return false;
      if (Signature != other.Signature) return false;
      if (CertificateOneofCase != other.CertificateOneofCase) return false;
      if (SignatureOneofCase != other.SignatureOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) hash ^= Certificate.GetHashCode();
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) hash ^= Signature.GetHashCode();
      hash ^= (int) certificateOneofCase_;
      hash ^= (int) signatureOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) {
        output.WriteRawTag(10);
        output.WriteBytes(Certificate);
      }
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (certificateOneofCase_ == CertificateOneofOneofCase.Certificate) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Certificate);
      }
      if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SenderCertificate other) {
      if (other == null) {
        return;
      }
      switch (other.CertificateOneofCase) {
        case CertificateOneofOneofCase.Certificate:
          Certificate = other.Certificate;
          break;
      }

      switch (other.SignatureOneofCase) {
        case SignatureOneofOneofCase.Signature:
          Signature = other.Signature;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Certificate = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SenderCertificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Certificate : pb::IMessage<Certificate> {
        private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.SenderCertificate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate(Certificate other) : this() {
          switch (other.SenderOneofCase) {
            case SenderOneofOneofCase.Sender:
              Sender = other.Sender;
              break;
          }

          switch (other.SenderDeviceOneofCase) {
            case SenderDeviceOneofOneofCase.SenderDevice:
              SenderDevice = other.SenderDevice;
              break;
          }

          switch (other.ExpiresOneofCase) {
            case ExpiresOneofOneofCase.Expires:
              Expires = other.Expires;
              break;
          }

          switch (other.IdentityKeyOneofCase) {
            case IdentityKeyOneofOneofCase.IdentityKey:
              IdentityKey = other.IdentityKey;
              break;
          }

          switch (other.SignerOneofCase) {
            case SignerOneofOneofCase.Signer:
              Signer = other.Signer.Clone();
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Certificate Clone() {
          return new Certificate(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sender {
          get { return senderOneofCase_ == SenderOneofOneofCase.Sender ? (string) senderOneof_ : ""; }
          set {
            senderOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            senderOneofCase_ = SenderOneofOneofCase.Sender;
          }
        }

        /// <summary>Field number for the "senderDevice" field.</summary>
        public const int SenderDeviceFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SenderDevice {
          get { return senderDeviceOneofCase_ == SenderDeviceOneofOneofCase.SenderDevice ? (uint) senderDeviceOneof_ : 0; }
          set {
            senderDeviceOneof_ = value;
            senderDeviceOneofCase_ = SenderDeviceOneofOneofCase.SenderDevice;
          }
        }

        /// <summary>Field number for the "expires" field.</summary>
        public const int ExpiresFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Expires {
          get { return expiresOneofCase_ == ExpiresOneofOneofCase.Expires ? (ulong) expiresOneof_ : 0UL; }
          set {
            expiresOneof_ = value;
            expiresOneofCase_ = ExpiresOneofOneofCase.Expires;
          }
        }

        /// <summary>Field number for the "identityKey" field.</summary>
        public const int IdentityKeyFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString IdentityKey {
          get { return identityKeyOneofCase_ == IdentityKeyOneofOneofCase.IdentityKey ? (pb::ByteString) identityKeyOneof_ : pb::ByteString.Empty; }
          set {
            identityKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            identityKeyOneofCase_ = IdentityKeyOneofOneofCase.IdentityKey;
          }
        }

        /// <summary>Field number for the "signer" field.</summary>
        public const int SignerFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.ServerCertificate Signer {
          get { return signerOneofCase_ == SignerOneofOneofCase.Signer ? (global::libsignalmetadata.protobuf.ServerCertificate) signerOneof_ : null; }
          set {
            signerOneof_ = value;
            signerOneofCase_ = value == null ? SignerOneofOneofCase.None : SignerOneofOneofCase.Signer;
          }
        }

        private object senderOneof_;
        /// <summary>Enum of possible cases for the "sender_oneof" oneof.</summary>
        public enum SenderOneofOneofCase {
          None = 0,
          Sender = 1,
        }
        private SenderOneofOneofCase senderOneofCase_ = SenderOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderOneofOneofCase SenderOneofCase {
          get { return senderOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderOneof() {
          senderOneofCase_ = SenderOneofOneofCase.None;
          senderOneof_ = null;
        }

        private object senderDeviceOneof_;
        /// <summary>Enum of possible cases for the "senderDevice_oneof" oneof.</summary>
        public enum SenderDeviceOneofOneofCase {
          None = 0,
          SenderDevice = 2,
        }
        private SenderDeviceOneofOneofCase senderDeviceOneofCase_ = SenderDeviceOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderDeviceOneofOneofCase SenderDeviceOneofCase {
          get { return senderDeviceOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderDeviceOneof() {
          senderDeviceOneofCase_ = SenderDeviceOneofOneofCase.None;
          senderDeviceOneof_ = null;
        }

        private object expiresOneof_;
        /// <summary>Enum of possible cases for the "expires_oneof" oneof.</summary>
        public enum ExpiresOneofOneofCase {
          None = 0,
          Expires = 3,
        }
        private ExpiresOneofOneofCase expiresOneofCase_ = ExpiresOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExpiresOneofOneofCase ExpiresOneofCase {
          get { return expiresOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpiresOneof() {
          expiresOneofCase_ = ExpiresOneofOneofCase.None;
          expiresOneof_ = null;
        }

        private object identityKeyOneof_;
        /// <summary>Enum of possible cases for the "identityKey_oneof" oneof.</summary>
        public enum IdentityKeyOneofOneofCase {
          None = 0,
          IdentityKey = 4,
        }
        private IdentityKeyOneofOneofCase identityKeyOneofCase_ = IdentityKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyOneofOneofCase IdentityKeyOneofCase {
          get { return identityKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdentityKeyOneof() {
          identityKeyOneofCase_ = IdentityKeyOneofOneofCase.None;
          identityKeyOneof_ = null;
        }

        private object signerOneof_;
        /// <summary>Enum of possible cases for the "signer_oneof" oneof.</summary>
        public enum SignerOneofOneofCase {
          None = 0,
          Signer = 5,
        }
        private SignerOneofOneofCase signerOneofCase_ = SignerOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignerOneofOneofCase SignerOneofCase {
          get { return signerOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSignerOneof() {
          signerOneofCase_ = SignerOneofOneofCase.None;
          signerOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Certificate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Certificate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (SenderDevice != other.SenderDevice) return false;
          if (Expires != other.Expires) return false;
          if (IdentityKey != other.IdentityKey) return false;
          if (!object.Equals(Signer, other.Signer)) return false;
          if (SenderOneofCase != other.SenderOneofCase) return false;
          if (SenderDeviceOneofCase != other.SenderDeviceOneofCase) return false;
          if (ExpiresOneofCase != other.ExpiresOneofCase) return false;
          if (IdentityKeyOneofCase != other.IdentityKeyOneofCase) return false;
          if (SignerOneofCase != other.SignerOneofCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (senderOneofCase_ == SenderOneofOneofCase.Sender) hash ^= Sender.GetHashCode();
          if (senderDeviceOneofCase_ == SenderDeviceOneofOneofCase.SenderDevice) hash ^= SenderDevice.GetHashCode();
          if (expiresOneofCase_ == ExpiresOneofOneofCase.Expires) hash ^= Expires.GetHashCode();
          if (identityKeyOneofCase_ == IdentityKeyOneofOneofCase.IdentityKey) hash ^= IdentityKey.GetHashCode();
          if (signerOneofCase_ == SignerOneofOneofCase.Signer) hash ^= Signer.GetHashCode();
          hash ^= (int) senderOneofCase_;
          hash ^= (int) senderDeviceOneofCase_;
          hash ^= (int) expiresOneofCase_;
          hash ^= (int) identityKeyOneofCase_;
          hash ^= (int) signerOneofCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (senderOneofCase_ == SenderOneofOneofCase.Sender) {
            output.WriteRawTag(10);
            output.WriteString(Sender);
          }
          if (senderDeviceOneofCase_ == SenderDeviceOneofOneofCase.SenderDevice) {
            output.WriteRawTag(16);
            output.WriteUInt32(SenderDevice);
          }
          if (expiresOneofCase_ == ExpiresOneofOneofCase.Expires) {
            output.WriteRawTag(25);
            output.WriteFixed64(Expires);
          }
          if (identityKeyOneofCase_ == IdentityKeyOneofOneofCase.IdentityKey) {
            output.WriteRawTag(34);
            output.WriteBytes(IdentityKey);
          }
          if (signerOneofCase_ == SignerOneofOneofCase.Signer) {
            output.WriteRawTag(42);
            output.WriteMessage(Signer);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (senderOneofCase_ == SenderOneofOneofCase.Sender) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
          }
          if (senderDeviceOneofCase_ == SenderDeviceOneofOneofCase.SenderDevice) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderDevice);
          }
          if (expiresOneofCase_ == ExpiresOneofOneofCase.Expires) {
            size += 1 + 8;
          }
          if (identityKeyOneofCase_ == IdentityKeyOneofOneofCase.IdentityKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKey);
          }
          if (signerOneofCase_ == SignerOneofOneofCase.Signer) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signer);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Certificate other) {
          if (other == null) {
            return;
          }
          switch (other.SenderOneofCase) {
            case SenderOneofOneofCase.Sender:
              Sender = other.Sender;
              break;
          }

          switch (other.SenderDeviceOneofCase) {
            case SenderDeviceOneofOneofCase.SenderDevice:
              SenderDevice = other.SenderDevice;
              break;
          }

          switch (other.ExpiresOneofCase) {
            case ExpiresOneofOneofCase.Expires:
              Expires = other.Expires;
              break;
          }

          switch (other.IdentityKeyOneofCase) {
            case IdentityKeyOneofOneofCase.IdentityKey:
              IdentityKey = other.IdentityKey;
              break;
          }

          switch (other.SignerOneofCase) {
            case SignerOneofOneofCase.Signer:
              Signer = other.Signer;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Sender = input.ReadString();
                break;
              }
              case 16: {
                SenderDevice = input.ReadUInt32();
                break;
              }
              case 25: {
                Expires = input.ReadFixed64();
                break;
              }
              case 34: {
                IdentityKey = input.ReadBytes();
                break;
              }
              case 42: {
                global::libsignalmetadata.protobuf.ServerCertificate subBuilder = new global::libsignalmetadata.protobuf.ServerCertificate();
                if (signerOneofCase_ == SignerOneofOneofCase.Signer) {
                  subBuilder.MergeFrom(Signer);
                }
                input.ReadMessage(subBuilder);
                Signer = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UnidentifiedSenderMessage : pb::IMessage<UnidentifiedSenderMessage> {
    private static readonly pb::MessageParser<UnidentifiedSenderMessage> _parser = new pb::MessageParser<UnidentifiedSenderMessage>(() => new UnidentifiedSenderMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnidentifiedSenderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalmetadata.protobuf.UnidentifiedDeliveryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage(UnidentifiedSenderMessage other) : this() {
      switch (other.EphemeralPublicOneofCase) {
        case EphemeralPublicOneofOneofCase.EphemeralPublic:
          EphemeralPublic = other.EphemeralPublic;
          break;
      }

      switch (other.EncryptedStaticOneofCase) {
        case EncryptedStaticOneofOneofCase.EncryptedStatic:
          EncryptedStatic = other.EncryptedStatic;
          break;
      }

      switch (other.EncryptedMessageOneofCase) {
        case EncryptedMessageOneofOneofCase.EncryptedMessage:
          EncryptedMessage = other.EncryptedMessage;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnidentifiedSenderMessage Clone() {
      return new UnidentifiedSenderMessage(this);
    }

    /// <summary>Field number for the "ephemeralPublic" field.</summary>
    public const int EphemeralPublicFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EphemeralPublic {
      get { return ephemeralPublicOneofCase_ == EphemeralPublicOneofOneofCase.EphemeralPublic ? (pb::ByteString) ephemeralPublicOneof_ : pb::ByteString.Empty; }
      set {
        ephemeralPublicOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        ephemeralPublicOneofCase_ = EphemeralPublicOneofOneofCase.EphemeralPublic;
      }
    }

    /// <summary>Field number for the "encryptedStatic" field.</summary>
    public const int EncryptedStaticFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedStatic {
      get { return encryptedStaticOneofCase_ == EncryptedStaticOneofOneofCase.EncryptedStatic ? (pb::ByteString) encryptedStaticOneof_ : pb::ByteString.Empty; }
      set {
        encryptedStaticOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        encryptedStaticOneofCase_ = EncryptedStaticOneofOneofCase.EncryptedStatic;
      }
    }

    /// <summary>Field number for the "encryptedMessage" field.</summary>
    public const int EncryptedMessageFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncryptedMessage {
      get { return encryptedMessageOneofCase_ == EncryptedMessageOneofOneofCase.EncryptedMessage ? (pb::ByteString) encryptedMessageOneof_ : pb::ByteString.Empty; }
      set {
        encryptedMessageOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        encryptedMessageOneofCase_ = EncryptedMessageOneofOneofCase.EncryptedMessage;
      }
    }

    private object ephemeralPublicOneof_;
    /// <summary>Enum of possible cases for the "ephemeralPublic_oneof" oneof.</summary>
    public enum EphemeralPublicOneofOneofCase {
      None = 0,
      EphemeralPublic = 1,
    }
    private EphemeralPublicOneofOneofCase ephemeralPublicOneofCase_ = EphemeralPublicOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EphemeralPublicOneofOneofCase EphemeralPublicOneofCase {
      get { return ephemeralPublicOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEphemeralPublicOneof() {
      ephemeralPublicOneofCase_ = EphemeralPublicOneofOneofCase.None;
      ephemeralPublicOneof_ = null;
    }

    private object encryptedStaticOneof_;
    /// <summary>Enum of possible cases for the "encryptedStatic_oneof" oneof.</summary>
    public enum EncryptedStaticOneofOneofCase {
      None = 0,
      EncryptedStatic = 2,
    }
    private EncryptedStaticOneofOneofCase encryptedStaticOneofCase_ = EncryptedStaticOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedStaticOneofOneofCase EncryptedStaticOneofCase {
      get { return encryptedStaticOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptedStaticOneof() {
      encryptedStaticOneofCase_ = EncryptedStaticOneofOneofCase.None;
      encryptedStaticOneof_ = null;
    }

    private object encryptedMessageOneof_;
    /// <summary>Enum of possible cases for the "encryptedMessage_oneof" oneof.</summary>
    public enum EncryptedMessageOneofOneofCase {
      None = 0,
      EncryptedMessage = 3,
    }
    private EncryptedMessageOneofOneofCase encryptedMessageOneofCase_ = EncryptedMessageOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptedMessageOneofOneofCase EncryptedMessageOneofCase {
      get { return encryptedMessageOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncryptedMessageOneof() {
      encryptedMessageOneofCase_ = EncryptedMessageOneofOneofCase.None;
      encryptedMessageOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnidentifiedSenderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnidentifiedSenderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EphemeralPublic != other.EphemeralPublic) return false;
      if (EncryptedStatic != other.EncryptedStatic) return false;
      if (EncryptedMessage != other.EncryptedMessage) return false;
      if (EphemeralPublicOneofCase != other.EphemeralPublicOneofCase) return false;
      if (EncryptedStaticOneofCase != other.EncryptedStaticOneofCase) return false;
      if (EncryptedMessageOneofCase != other.EncryptedMessageOneofCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ephemeralPublicOneofCase_ == EphemeralPublicOneofOneofCase.EphemeralPublic) hash ^= EphemeralPublic.GetHashCode();
      if (encryptedStaticOneofCase_ == EncryptedStaticOneofOneofCase.EncryptedStatic) hash ^= EncryptedStatic.GetHashCode();
      if (encryptedMessageOneofCase_ == EncryptedMessageOneofOneofCase.EncryptedMessage) hash ^= EncryptedMessage.GetHashCode();
      hash ^= (int) ephemeralPublicOneofCase_;
      hash ^= (int) encryptedStaticOneofCase_;
      hash ^= (int) encryptedMessageOneofCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ephemeralPublicOneofCase_ == EphemeralPublicOneofOneofCase.EphemeralPublic) {
        output.WriteRawTag(10);
        output.WriteBytes(EphemeralPublic);
      }
      if (encryptedStaticOneofCase_ == EncryptedStaticOneofOneofCase.EncryptedStatic) {
        output.WriteRawTag(18);
        output.WriteBytes(EncryptedStatic);
      }
      if (encryptedMessageOneofCase_ == EncryptedMessageOneofOneofCase.EncryptedMessage) {
        output.WriteRawTag(26);
        output.WriteBytes(EncryptedMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ephemeralPublicOneofCase_ == EphemeralPublicOneofOneofCase.EphemeralPublic) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EphemeralPublic);
      }
      if (encryptedStaticOneofCase_ == EncryptedStaticOneofOneofCase.EncryptedStatic) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedStatic);
      }
      if (encryptedMessageOneofCase_ == EncryptedMessageOneofOneofCase.EncryptedMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncryptedMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnidentifiedSenderMessage other) {
      if (other == null) {
        return;
      }
      switch (other.EphemeralPublicOneofCase) {
        case EphemeralPublicOneofOneofCase.EphemeralPublic:
          EphemeralPublic = other.EphemeralPublic;
          break;
      }

      switch (other.EncryptedStaticOneofCase) {
        case EncryptedStaticOneofOneofCase.EncryptedStatic:
          EncryptedStatic = other.EncryptedStatic;
          break;
      }

      switch (other.EncryptedMessageOneofCase) {
        case EncryptedMessageOneofOneofCase.EncryptedMessage:
          EncryptedMessage = other.EncryptedMessage;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EphemeralPublic = input.ReadBytes();
            break;
          }
          case 18: {
            EncryptedStatic = input.ReadBytes();
            break;
          }
          case 26: {
            EncryptedMessage = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnidentifiedSenderMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Message : pb::IMessage<Message> {
        private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message(Message other) : this() {
          switch (other.TypeOneofCase) {
            case TypeOneofOneofCase.Type:
              Type = other.Type;
              break;
          }

          switch (other.SenderCertificateOneofCase) {
            case SenderCertificateOneofOneofCase.SenderCertificate:
              SenderCertificate = other.SenderCertificate.Clone();
              break;
          }

          switch (other.ContentOneofCase) {
            case ContentOneofOneofCase.Content:
              Content = other.Content;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message Clone() {
          return new Message(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type Type {
          get { return typeOneofCase_ == TypeOneofOneofCase.Type ? (global::libsignalmetadata.protobuf.UnidentifiedSenderMessage.Types.Message.Types.Type) typeOneof_ : 0; }
          set {
            typeOneof_ = value;
            typeOneofCase_ = TypeOneofOneofCase.Type;
          }
        }

        /// <summary>Field number for the "senderCertificate" field.</summary>
        public const int SenderCertificateFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalmetadata.protobuf.SenderCertificate SenderCertificate {
          get { return senderCertificateOneofCase_ == SenderCertificateOneofOneofCase.SenderCertificate ? (global::libsignalmetadata.protobuf.SenderCertificate) senderCertificateOneof_ : null; }
          set {
            senderCertificateOneof_ = value;
            senderCertificateOneofCase_ = value == null ? SenderCertificateOneofOneofCase.None : SenderCertificateOneofOneofCase.SenderCertificate;
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Content {
          get { return contentOneofCase_ == ContentOneofOneofCase.Content ? (pb::ByteString) contentOneof_ : pb::ByteString.Empty; }
          set {
            contentOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            contentOneofCase_ = ContentOneofOneofCase.Content;
          }
        }

        private object typeOneof_;
        /// <summary>Enum of possible cases for the "type_oneof" oneof.</summary>
        public enum TypeOneofOneofCase {
          None = 0,
          Type = 1,
        }
        private TypeOneofOneofCase typeOneofCase_ = TypeOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeOneofOneofCase TypeOneofCase {
          get { return typeOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTypeOneof() {
          typeOneofCase_ = TypeOneofOneofCase.None;
          typeOneof_ = null;
        }

        private object senderCertificateOneof_;
        /// <summary>Enum of possible cases for the "senderCertificate_oneof" oneof.</summary>
        public enum SenderCertificateOneofOneofCase {
          None = 0,
          SenderCertificate = 2,
        }
        private SenderCertificateOneofOneofCase senderCertificateOneofCase_ = SenderCertificateOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderCertificateOneofOneofCase SenderCertificateOneofCase {
          get { return senderCertificateOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderCertificateOneof() {
          senderCertificateOneofCase_ = SenderCertificateOneofOneofCase.None;
          senderCertificateOneof_ = null;
        }

        private object contentOneof_;
        /// <summary>Enum of possible cases for the "content_oneof" oneof.</summary>
        public enum ContentOneofOneofCase {
          None = 0,
          Content = 3,
        }
        private ContentOneofOneofCase contentOneofCase_ = ContentOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ContentOneofOneofCase ContentOneofCase {
          get { return contentOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentOneof() {
          contentOneofCase_ = ContentOneofOneofCase.None;
          contentOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(SenderCertificate, other.SenderCertificate)) return false;
          if (Content != other.Content) return false;
          if (TypeOneofCase != other.TypeOneofCase) return false;
          if (SenderCertificateOneofCase != other.SenderCertificateOneofCase) return false;
          if (ContentOneofCase != other.ContentOneofCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (typeOneofCase_ == TypeOneofOneofCase.Type) hash ^= Type.GetHashCode();
          if (senderCertificateOneofCase_ == SenderCertificateOneofOneofCase.SenderCertificate) hash ^= SenderCertificate.GetHashCode();
          if (contentOneofCase_ == ContentOneofOneofCase.Content) hash ^= Content.GetHashCode();
          hash ^= (int) typeOneofCase_;
          hash ^= (int) senderCertificateOneofCase_;
          hash ^= (int) contentOneofCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (typeOneofCase_ == TypeOneofOneofCase.Type) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (senderCertificateOneofCase_ == SenderCertificateOneofOneofCase.SenderCertificate) {
            output.WriteRawTag(18);
            output.WriteMessage(SenderCertificate);
          }
          if (contentOneofCase_ == ContentOneofOneofCase.Content) {
            output.WriteRawTag(26);
            output.WriteBytes(Content);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (typeOneofCase_ == TypeOneofOneofCase.Type) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (senderCertificateOneofCase_ == SenderCertificateOneofOneofCase.SenderCertificate) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderCertificate);
          }
          if (contentOneofCase_ == ContentOneofOneofCase.Content) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message other) {
          if (other == null) {
            return;
          }
          switch (other.TypeOneofCase) {
            case TypeOneofOneofCase.Type:
              Type = other.Type;
              break;
          }

          switch (other.SenderCertificateOneofCase) {
            case SenderCertificateOneofOneofCase.SenderCertificate:
              SenderCertificate = other.SenderCertificate;
              break;
          }

          switch (other.ContentOneofCase) {
            case ContentOneofOneofCase.Content:
              Content = other.Content;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                typeOneof_ = input.ReadEnum();
                typeOneofCase_ = TypeOneofOneofCase.Type;
                break;
              }
              case 18: {
                global::libsignalmetadata.protobuf.SenderCertificate subBuilder = new global::libsignalmetadata.protobuf.SenderCertificate();
                if (senderCertificateOneofCase_ == SenderCertificateOneofOneofCase.SenderCertificate) {
                  subBuilder.MergeFrom(SenderCertificate);
                }
                input.ReadMessage(subBuilder);
                SenderCertificate = subBuilder;
                break;
              }
              case 26: {
                Content = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Message message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("ZERO_PLACEHOLDER")] ZeroPlaceholder = 0,
            [pbr::OriginalName("PREKEY_MESSAGE")] PrekeyMessage = 1,
            [pbr::OriginalName("MESSAGE")] Message = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
